# app_ui.py
import streamlit as st
import sys
import os

# Th√™m project_root v√†o sys.path ƒë·ªÉ import c√°c module kh√°c
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = current_dir # Gi·∫£ s·ª≠ app_ui.py n·∫±m trong project_root
# N·∫øu app_ui.py n·∫±m trong th∆∞ m·ª•c con, v√≠ d·ª• `ui/`, th√¨ project_root = os.path.dirname(current_dir)
sys.path.append(project_root)

import config # ƒê·ªÉ ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa artifacts
from dynamic_reasoning_solver import DynamicKAGSolver # Import solver
# import llm_utils # C√≥ th·ªÉ c·∫ßn ƒë·ªÉ kh·ªüi t·∫°o model n·∫øu solver kh√¥ng t·ª± l√†m

# TODO:  Thi·∫øt k·∫ø giao di·ªán ng∆∞·ªùi d√πng th√¢n thi·ªán.
#       - Hi·ªÉn th·ªã qu√° tr√¨nh suy lu·∫≠n (scratchpad) m·ªôt c√°ch r√µ r√†ng (v√≠ d·ª•: trong expander).
#       - X·ª≠ l√Ω tr·∫°ng th√°i loading khi solver ƒëang ch·∫°y.
#       - Cho ph√©p ng∆∞·ªùi d√πng c·∫•u h√¨nh m·ªôt s·ªë tham s·ªë c∆° b·∫£n (v√≠ d·ª•: top_k, max_steps) n·∫øu mu·ªën.

# --- Kh·ªüi t·∫°o Solver (ch·ªâ m·ªôt l·∫ßn) ---
@st.cache_resource # Quan tr·ªçng ƒë·ªÉ kh√¥ng load l·∫°i solver m·ªói l·∫ßn interact
def load_solver():
    # Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa artifacts tr∆∞·ªõc khi kh·ªüi t·∫°o solver
    required_files = [config.FAISS_INDEX_PATH, config.GRAPH_PATH, config.DOC_STORE_PATH]
    missing_files = [f for f in required_files if not os.path.exists(f)]
    if missing_files:
        st.error(f"Application cannot start. Missing critical KAG artifact files: {', '.join(missing_files)}. "
                 "Please ensure the KAG data pipeline (crawler, processor, builder) has been run successfully.")
        return None
    try:
        # llm_utils.get_llm_model() # Pre-load models if not handled by solver's init
        # llm_utils.get_embedding_model()
        solver = DynamicKAGSolver()
        return solver
    except Exception as e:
        st.error(f"Error initializing KAG Solver: {e}")
        st.error("Please check if models are downloaded and artifacts are correctly built.")
        return None

# --- Giao di·ªán Streamlit ---
st.set_page_config(page_title="KAG Reasoning Chatbot", layout="wide")
st.title("üìö KAG Powered Reasoning Chatbot")
st.markdown("H·ªèi nh·ªØng c√¢u h·ªèi ph·ª©c t·∫°p v·ªÅ n·ªôi dung ƒë√†o t·∫°o ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω!")

# Load solver
solver_instance = load_solver()

if solver_instance is None:
    st.warning("Solver could not be loaded. Please check the console for errors and ensure KAG artifacts are present.")
else:
    # Initialize chat history
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Display chat messages from history on app rerun
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
            if "scratchpad" in message and message["scratchpad"]:
                with st.expander("Show Reasoning Process"):
                    st.text_area("Scratchpad", value=message["scratchpad"], height=300, disabled=True)


    # React to user input
    if prompt := st.chat_input("C√¢u h·ªèi c·ªßa b·∫°n l√† g√¨?"):
        # Add user message to chat history
        st.session_state.messages.append({"role": "user", "content": prompt})
        # Display user message in chat message container
        with st.chat_message("user"):
            st.markdown(prompt)

        # Display assistant response in chat message container
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            full_response_text = ""
            
            # TODO:  Hi·ªÉn th·ªã "Thinking..." ho·∫∑c spinner trong khi solver ch·∫°y.
            #       C√°ch t·ªët h∆°n l√† ch·∫°y solver trong m·ªôt thread ri√™ng ƒë·ªÉ UI kh√¥ng b·ªã block.
            #       Streamlit c√≥ c√°ch ƒë·ªÉ stream output t·ª´ generator.
            
            # Hi·ªán t·∫°i, ch·∫°y ƒë·ªìng b·ªô (UI s·∫Ω b·ªã block)
            try:
                with st.spinner("ƒêang suy lu·∫≠n v√† t√¨m ki·∫øm..."):
                    # ƒê·ªÉ l·∫•y scratchpad, ch√∫ng ta c·∫ßn s·ª≠a ƒë·ªïi solver.solve()
                    # ho·∫∑c th√™m m·ªôt c√°ch ƒë·ªÉ truy c·∫≠p n√≥.
                    # Hi·ªán t·∫°i, ch√∫ng ta kh√¥ng c√≥ scratchpad tr·ª±c ti·∫øp t·ª´ solve()
                    # Gi·∫£ s·ª≠ solver.solve() tr·∫£ v·ªÅ (final_answer, scratchpad_history)
                    # C·∫ßn s·ª≠a ƒë·ªïi dynamic_reasoning_solver.py ƒë·ªÉ tr·∫£ v·ªÅ scratchpad
                    
                    # ---- GI·∫¢ ƒê·ªäNH C·∫¶N S·ª¨A SOLVER ----
                    # final_answer, scratchpad_log = solver_instance.solve_with_log(prompt) 
                    # ---- K·∫æT TH√öC GI·∫¢ ƒê·ªäNH ----

                    # C√°ch hi·ªán t·∫°i (ch·ªâ c√≥ final_answer)
                    final_answer = solver_instance.solve(prompt)
                    scratchpad_log = "Scratchpad logging not fully implemented in UI for this version. Full log in console."
                    # ƒê·ªÉ c√≥ scratchpad ·ªü ƒë√¢y, solver.solve c·∫ßn tr·∫£ v·ªÅ n√≥, ho·∫∑c c√≥ m·ªôt callback
                    # Ho·∫∑c ch√∫ng ta c√≥ th·ªÉ capture stdout c·ªßa solver (ph·ª©c t·∫°p h∆°n)

                full_response_text = final_answer
                message_placeholder.markdown(full_response_text)
                
                # Th√™m scratchpad v√†o message n·∫øu c√≥ (c·∫ßn s·ª≠a solver)
                assistant_message = {"role": "assistant", "content": full_response_text, "scratchpad": scratchpad_log}

            except Exception as e:
                st.error(f"An error occurred: {e}")
                full_response_text = "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω."
                message_placeholder.markdown(full_response_text)
                assistant_message = {"role": "assistant", "content": full_response_text, "scratchpad": f"Error: {e}"}
        
        st.session_state.messages.append(assistant_message)

# TODO:  Th√™m c√°c t√≠nh nƒÉng UI kh√°c:
#       - N√∫t "Clear Chat".
#       - Hi·ªÉn th·ªã th√¥ng tin v·ªÅ KG (v√≠ d·ª•: s·ªë l∆∞·ª£ng node, c·∫°nh) - c√≥ th·ªÉ ·ªü sidebar.
#       - Cho ph√©p upload t√†i li·ªáu m·ªõi ƒë·ªÉ build KG (n·∫øu c√≥ ch·ª©c nƒÉng ƒë√≥).
